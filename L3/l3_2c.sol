
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract l3_2c {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call   
    struct Task {
        string name; //Название
        uint32 time; //Время создания
        bool done;  //Флаг выполнения
    }
    uint8 lastTaskId=0;
    mapping(uint8 => Task) tasks;

     string beta;

   
    constructor() public {       
        require(tvm.pubkey() != 0, 101);     
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();       
    }
    function addTask_local(string name)public returns (Task B1) {
        uint8 thisId;
        uint32 time = now;
        bool done = false;
        thisId = lastTaskId++; // увеличиваем счетчик на 1
        tasks[thisId] = Task(name, time, done);
        B1 =  tasks[thisId];
    }
     function addTask(string name)public checkOwnerAndAccept returns (Task B1) {
        uint8 thisId;
        uint32 time = now;
        bool done = false;
        thisId = lastTaskId++; // увеличиваем счетчик на 1
        tasks[thisId] = Task(name, time, done);
        B1 =  tasks[thisId];
    }
    function getCountOfTasks_local()public returns (uint8) {  //Получить количество открытых задач     
       // string[] names;
       uint8 myCount=0;
       for (uint8 i=0;i<lastTaskId;i++)
       {
           if (tasks[i].done == false)
           {
               myCount++;
           }
       }
        return myCount;       
    }


    function getTasks_local()public  returns (string teta) { //Получить открытые задачи...
        for (uint8 i=0;i<lastTaskId;i++)
       {
           if (tasks[i].done == false & tasks[i].name != "")
           {
              teta += tasks[i].name;
              if (i ==   lastTaskId-1)  
              {
                  teta += ".";
              } 
              else {
                   teta += ", ";
              }
           }
       }
    }
    function makeTaskDone_local(uint8 taskId)public returns (bool) {
        
        if(taskId < 0 && taskId > lastTaskId) return false; //Проверка айдишника
        else  { tasks[taskId].done = true;
        return true;
        }       
       
    }
    function makeTaskDeleeted_local(uint8 taskId)public returns (bool) {
        
        if(taskId < 0 && taskId > lastTaskId) return false; //Проверка айдишника
        else
        {
            delete tasks[taskId];
            return true;
        }  
    }







    modifier checkOwnerAndAccept {       
        require(msg.pubkey() == tvm.pubkey(), 102);       
        tvm.accept(); 
       _;
    }
}
